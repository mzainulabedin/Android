package com.sandz.mshopping.beans;

import java.util.List;
import java.util.ArrayList;
import com.sandz.mshopping.dao.DaoSession;
import de.greenrobot.dao.DaoException;


import com.sandz.mshopping.dao.CategoryDao;
import com.sandz.mshopping.dao.ItemDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ITEMS.
 */
public class Item {

    private Long id;
    /** Not-null value. */
    private String name;
    private String description;
    private String tags;
    private String pictureId;
    private Boolean isOptional;
    /** Not-null value. */
    private java.util.Date createdOn;
    /** Not-null value. */
    private java.util.Date modifiedOn;
    private Long categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemDao myDao;

    private Category category;
    private Long category__resolvedKey;

    private List<MonthItem> monthItems;

    public Item() {
    }

    public Item(Long id) {
        this.id = id;
    }

    public Item(Long id, String name, String description, String tags, String pictureId, Boolean isOptional, java.util.Date createdOn, java.util.Date modifiedOn, Long categoryId) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.tags = tags;
        this.pictureId = pictureId;
        this.isOptional = isOptional;
        this.createdOn = createdOn;
        this.modifiedOn = modifiedOn;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getTags() {
        return tags;
    }

    public void setTags(String tags) {
        this.tags = tags;
    }

    public String getPictureId() {
        return pictureId;
    }

    public void setPictureId(String pictureId) {
        this.pictureId = pictureId;
    }

    public Boolean getIsOptional() {
        return isOptional;
    }

    public void setIsOptional(Boolean isOptional) {
        this.isOptional = isOptional;
    }

    /** Not-null value. */
    public java.util.Date getCreatedOn() {
        return createdOn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreatedOn(java.util.Date createdOn) {
        this.createdOn = createdOn;
    }

    /** Not-null value. */
    public java.util.Date getModifiedOn() {
        return modifiedOn;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setModifiedOn(java.util.Date modifiedOn) {
        this.modifiedOn = modifiedOn;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public Category getCategory() {
    if (category==null){
          category = new Category();
    }
        return category;
    }

    public void setCategory(Category category) {
        synchronized (this) {
            this.category = category;
            categoryId = category == null ? null : category.getId();
            category__resolvedKey = categoryId;
        }

    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MonthItem> getMonthItems() {
        if (monthItems == null) {
            monthItems = new ArrayList<MonthItem>();
        }
        return monthItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMonthItems() {
        monthItems = null;
    }

}
